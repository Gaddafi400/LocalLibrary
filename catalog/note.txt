That's it! The generic view will query the database to get all records for the specified model (Book)
then render a template located at /locallibrary/catalog/templates/catalog/book_list.html (which we will create below).
Within the template you can access the list of books with the template variable named object_list OR book_list
(i.e. generically "<the model name>_list").

You can add attributes to change the default behavior above. For example, you can specify another template file if you
need to have multiple views that use this same model, or you might want to use a different template variable name
if book_list is not intuitive for your particular template use-case. Possibly the most useful variation is to
change/filter the subset of results that are returned — so instead of listing all books you might list top 5 books
that were read by other users.

class BookListView(generic.ListView):
    model = Book
    context_object_name = 'book_list'   # your own name for the list as a template variable
    queryset = Book.objects.filter(title__icontains='war')[:5] # Get 5 books containing the title war
    template_name = 'books/my_arbitrary_template_name_list.html'  # Specify your own template name/location


Overriding methods in class-based views
While we don't need to do so here, you can also override some of the class methods.
For example, we can override the get_queryset() method to change the list of records returned. This is more flexible
than just setting the queryset attribute as we did in the preceding code fragment (though there is no real benefit in this case):

class BookListView(generic.ListView):
    model = Book
    def get_queryset(self):
        return Book.objects.filter(title__icontains='war')[:5] # Get 5 books containing the title war

We might also override get_context_data() in order to pass additional context variables to the template
(e.g. the list of books is passed by default). The fragment below shows how to add a variable named "some_data" to the
context (it would then be available as a template variable).

class BookListView(generic.ListView):
    model = Book
    def get_context_data(self, **kwargs):
        # Call the base implementation first to get the context
        context = super(BookListView, self).get_context_data(**kwargs)
        # Create any data and add it to the context
        context['some_data'] = 'This is just some data'
        return context

When doing this it is important to follow the pattern used above:
    ⦿ First get the existing context from our superclass.
    ⦿ Then add your new context information.
    ⦿ Then return the new (updated) context.

Note: Check out Built-in class-based generic views (Django docs) for many more examples of what you can do.
https://docs.djangoproject.com/en/4.0/topics/class-based-views/generic-display/
